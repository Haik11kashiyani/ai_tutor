{
  "days": [
    {
      "day": 1,
      "title": "Print Hello World",
      "language": "python",
      "code": "print('Hello, World!')",
      "output": "Hello, World!",
      "explanation": "Alright, let’s kick things off! The print function shows text on your screen. Whatever you put inside the quotes gets displayed — just like saying hello to Python!"
    },
    {
      "day": 2,
      "title": "Using Variables",
      "language": "python",
      "code": "name = 'Python'\nprint(name)",
      "output": "Python",
      "explanation": "Variables are like boxes that hold information. Here, we stored the word ‘Python’ in a box called name, and print it out!"
    },
    {
      "day": 3,
      "title": "Numbers and Math",
      "language": "python",
      "code": "x = 5\ny = 3\nprint(x + y)",
      "output": "8",
      "explanation": "Python can do math too! Add, subtract, multiply, divide — just like your calculator but in code!"
    },
    {
      "day": 4,
      "title": "User Input",
      "language": "python",
      "code": "name = input('Enter your name: ')\nprint('Hello', name)",
      "output": "Hello Hardik",
      "explanation": "Want to talk to the user? The input function lets them type something, and you can use it right after — just like saying hello personally!"
    },
    {
      "day": 5,
      "title": "Type Conversion",
      "language": "python",
      "code": "age = int(input('Enter your age: '))\nprint(age + 1)",
      "output": "26",
      "explanation": "Inputs are always strings, even if you type numbers. Use int() to turn it into a real number for math!"
    },
    {
      "day": 6,
      "title": "Strings and Concatenation",
      "language": "python",
      "code": "first = 'Py'\nsecond = 'thon'\nprint(first + second)",
      "output": "Python",
      "explanation": "You can join two strings using a plus sign! It’s like sticking two words together to make a new one."
    },
    {
      "day": 7,
      "title": "String Formatting",
      "language": "python",
      "code": "name = 'Alex'\nage = 20\nprint(f'My name is {name} and I am {age}')",
      "output": "My name is Alex and I am 20",
      "explanation": "Using f-strings makes your sentences dynamic! Just wrap your variables in curly braces inside an f-string."
    },
    {
      "day": 8,
      "title": "If Statements",
      "language": "python",
      "code": "age = 18\nif age >= 18:\n    print('You are an adult!')",
      "output": "You are an adult!",
      "explanation": "If statements let you make decisions. If the condition is true, Python runs the code inside — simple logic power!"
    },
    {
      "day": 9,
      "title": "Else Statement",
      "language": "python",
      "code": "age = 16\nif age >= 18:\n    print('Adult')\nelse:\n    print('Minor')",
      "output": "Minor",
      "explanation": "If something isn’t true, the else block runs instead. It’s like saying: if not this, then that!"
    },
    {
      "day": 10,
      "title": "Elif Condition",
      "language": "python",
      "code": "score = 85\nif score >= 90:\n    print('A')\nelif score >= 80:\n    print('B')\nelse:\n    print('C')",
      "output": "B",
      "explanation": "Elif means ‘else if’. You can check multiple conditions one after another — perfect for grading systems!"
    },
    {
      "day": 11,
      "title": "Lists in Python",
      "language": "python",
      "code": "fruits = ['apple', 'banana', 'cherry']\nprint(fruits[0])",
      "output": "apple",
      "explanation": "Lists hold multiple items in one variable! Use indexes (starting from 0) to pick specific elements."
    },
    {
      "day": 12,
      "title": "Adding to a List",
      "language": "python",
      "code": "fruits = ['apple', 'banana']\nfruits.append('cherry')\nprint(fruits)",
      "output": "['apple', 'banana', 'cherry']",
      "explanation": "Want to add more stuff? append() adds new elements to the end of your list."
    },
    {
      "day": 13,
      "title": "For Loop",
      "language": "python",
      "code": "for i in range(3):\n    print('Hello')",
      "output": "Hello\nHello\nHello",
      "explanation": "Loops repeat code! The range(3) makes it run three times — like hitting replay on your code."
    },
    {
      "day": 14,
      "title": "Looping Through a List",
      "language": "python",
      "code": "fruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)",
      "output": "apple\nbanana\ncherry",
      "explanation": "For loops can walk through each item in a list — super handy for working with collections!"
    },
    {
      "day": 15,
      "title": "While Loop",
      "language": "python",
      "code": "count = 1\nwhile count <= 3:\n    print(count)\n    count += 1",
      "output": "1\n2\n3",
      "explanation": "While loops run until the condition becomes false. It’s like saying — keep going until you’re done!"
    },
    {
      "day": 16,
      "title": "Functions in Python",
      "language": "python",
      "code": "def greet():\n    print('Hello there!')\n\ngreet()",
      "output": "Hello there!",
      "explanation": "Functions are reusable blocks of code! Define once, call anytime — just like shortcuts for your logic."
    },
    {
      "day": 17,
      "title": "Function with Parameters",
      "language": "python",
      "code": "def greet(name):\n    print('Hello', name)\n\ngreet('Sam')",
      "output": "Hello Sam",
      "explanation": "Functions can take inputs too! Parameters make them more flexible and powerful."
    },
    {
      "day": 18,
      "title": "Return Values",
      "language": "python",
      "code": "def add(a, b):\n    return a + b\n\nprint(add(2, 3))",
      "output": "5",
      "explanation": "Return sends data back from a function. Think of it like answering a question — you send the result back!"
    },
    {
      "day": 19,
      "title": "Default Parameters",
      "language": "python",
      "code": "def greet(name='User'):\n    print('Hello', name)\n\ngreet()",
      "output": "Hello User",
      "explanation": "Default parameters kick in when no value is given — super useful for quick function calls."
    },
    {
      "day": 20,
      "title": "List Slicing",
      "language": "python",
      "code": "nums = [1,2,3,4,5]\nprint(nums[1:4])",
      "output": "[2, 3, 4]",
      "explanation": "Slicing helps you grab parts of a list — from index 1 up to (but not including) 4."
    },
    {
      "day": 21,
      "title": "Tuples in Python",
      "language": "python",
      "code": "colors = ('red', 'green', 'blue')\nprint(colors[0])",
      "output": "red",
      "explanation": "Tuples are like lists but can’t be changed. Perfect for data you want to keep safe."
    },
    {
      "day": 22,
      "title": "Dictionaries",
      "language": "python",
      "code": "person = {'name': 'Alex', 'age': 25}\nprint(person['name'])",
      "output": "Alex",
      "explanation": "Dictionaries store data in key-value pairs — just like a contact book where each name has info!"
    },
    {
      "day": 23,
      "title": "Adding to a Dictionary",
      "language": "python",
      "code": "person = {'name': 'Alex'}\nperson['age'] = 25\nprint(person)",
      "output": "{'name': 'Alex', 'age': 25}",
      "explanation": "You can easily add new key-value pairs — dictionaries are super flexible!"
    },
    {
      "day": 24,
      "title": "If in a List",
      "language": "python",
      "code": "fruits = ['apple', 'banana']\nif 'apple' in fruits:\n    print('Yes, apple is here!')",
      "output": "Yes, apple is here!",
      "explanation": "You can check if an item exists using ‘in’. It’s a quick way to search through lists."
    },
    {
      "day": 25,
      "title": "Nested Loops",
      "language": "python",
      "code": "for i in range(2):\n    for j in range(2):\n        print(i, j)",
      "output": "0 0\n0 1\n1 0\n1 1",
      "explanation": "Loops inside loops — perfect for grids, patterns, or combinations!"
    },
    {
      "day": 26,
      "title": "Break Statement",
      "language": "python",
      "code": "for i in range(5):\n    if i == 3:\n        break\n    print(i)",
      "output": "0\n1\n2",
      "explanation": "Break stops the loop early — great when you’ve found what you were looking for!"
    },
    {
      "day": 27,
      "title": "Continue Statement",
      "language": "python",
      "code": "for i in range(5):\n    if i == 2:\n        continue\n    print(i)",
      "output": "0\n1\n3\n4",
      "explanation": "Continue skips the current loop step — like saying ‘skip this one, move on!’"
    },
    {
      "day": 28,
      "title": "Nested If",
      "language": "python",
      "code": "age = 20\nif age > 18:\n    if age < 25:\n        print('Young Adult!')",
      "output": "Young Adult!",
      "explanation": "You can put if statements inside each other — that’s called nesting. Super handy for detailed checks!"
    },
    {
      "day": 29,
      "title": "Try and Except",
      "language": "python",
      "code": "try:\n    num = int('abc')\nexcept:\n    print('Error occurred!')",
      "output": "Error occurred!",
      "explanation": "Try and except keep your code safe from crashes. If something breaks, except handles it smoothly!"
    },
    {
      "day": 30,
      "title": "Mini Project: Greeting App",
      "language": "python",
      "code": "name = input('Your name: ')\nprint(f'Welcome to Python, {name}!')",
      "output": "Welcome to Python, Hardik!",
      "explanation": "Congrats! You’ve learned the basics. This simple app greets the user — and shows how input, variables, and f-strings come together!"
    }
  ]
}
